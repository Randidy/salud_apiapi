openapi: 3.0.3
info:
  title: Sistema de Gesti√≥n M√©dica - Salud Vital API
  description: |
    API REST para el sistema de gesti√≥n m√©dica integral. 
    Permite la gesti√≥n de pacientes, m√©dicos, citas m√©dicas y recetas.
    
    ## Usuarios Predefinidos para Pruebas:
    
    ### üëë **ADMIN**
    - **Email**: `admin@saludvital.com`
    - **Password**: `admin123`
    
    ### ü©∫ **M√âDICO** 
    - **Email**: `medico@saludvital.com`
    - **Password**: `medico123`
    
    ### üë§ **PACIENTE**
    - **Email**: `paciente@saludvital.com`
    - **Password**: `paciente123`
    
    ## Flujo de Autenticaci√≥n:
    1. Hacer login con alguno de los usuarios predefinidos
    2. Copiar el `accessToken` de la respuesta
    3. Usar en header: `Authorization: Bearer {accessToken}`
  version: 1.0.0
  contact:
    name: Equipo de Desarrollo
    email: dev@saludvital.com
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8081/api
    description: Servidor de Desarrollo

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer Token. Ejemplo 'Bearer {token}'

  schemas:
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "paciente@saludvital.com"
        password:
          type: string
          example: "paciente123"

    SignUpRequest:
      type: object
      required:
        - name
        - email
        - password
        - numeroIdentificacion
        - fechaNacimiento
      properties:
        name:
          type: string
          example: "Juan P√©rez"
        email:
          type: string
          format: email
          example: "juan.perez@email.com"
        password:
          type: string
          minLength: 6
          example: "123456"
        numeroIdentificacion:
          type: string
          example: "12345678"
        fechaNacimiento:
          type: string
          format: date
          example: "1990-05-15"

    JwtAuthenticationResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9..."
        tokenType:
          type: string
          example: "Bearer"
        userInfo:
          $ref: '#/components/schemas/UserInfoResponse'

    UserInfoResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Juan P√©rez"
        email:
          type: string
          example: "juan.perez@email.com"
        roles:
          type: array
          items:
            type: string
          example: ["ROLE_PACIENTE"]

    CitaRequest:
      type: object
      required:
        - medicoId
        - fecha
        - hora
      properties:
        medicoId:
          type: integer
          format: int64
          example: 1
        fecha:
          type: string
          format: date
          example: "2024-12-20"
        hora:
          type: string
          format: time
          example: "10:00:00"
        motivo:
          type: string
          example: "Consulta general"

    CitaResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        fecha:
          type: string
          format: date
          example: "2024-12-20"
        hora:
          type: string
          format: time
          example: "10:00:00"
        pacienteNombre:
          type: string
          example: "Juan P√©rez"
        medicoNombre:
          type: string
          example: "Dr. Carlos Rodr√≠guez"
        especialidad:
          type: string
          example: "Cardiolog√≠a"
        estado:
          type: string
          enum: [PROGRAMADA, CANCELADA, COMPLETADA]
          example: "PROGRAMADA"
        motivo:
          type: string
          example: "Consulta general"
        tarifaAplicada:
          type: number
          format: decimal
          example: 150.00

    RecetaRequest:
      type: object
      required:
        - pacienteId
        - items
      properties:
        pacienteId:
          type: integer
          format: int64
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/ItemRecetaRequest'

    ItemRecetaRequest:
      type: object
      required:
        - medicamentoId
        - dosis
        - frecuencia
      properties:
        medicamentoId:
          type: integer
          format: int64
          example: 1
        dosis:
          type: string
          example: "500mg"
        frecuencia:
          type: string
          example: "Cada 8 horas"

    Medicamento:
      type: object
      required:
        - nombre
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nombre:
          type: string
          example: "Paracetamol"
        descripcion:
          type: string
          example: "Analg√©sico y antipir√©tico"

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operaci√≥n exitosa"
        data:
          type: object

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error en la operaci√≥n"

paths:
  /auth/login:
    post:
      tags:
        - üîê Autenticaci√≥n
      summary: Iniciar sesi√≥n
      description: |
        Autentica usuario y obtiene token JWT.
        
        **Usuarios predefinidos:**
        - Admin: `admin@saludvital.com` / `admin123`
        - M√©dico: `medico@saludvital.com` / `medico123`
        - Paciente: `paciente@saludvital.com` / `paciente123`
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              admin:
                summary: Login como Admin
                value:
                  email: "admin@saludvital.com"
                  password: "admin123"
              medico:
                summary: Login como M√©dico
                value:
                  email: "medico@saludvital.com"
                  password: "medico123"
              paciente:
                summary: Login como Paciente
                value:
                  email: "paciente@saludvital.com"
                  password: "paciente123"
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtAuthenticationResponse'
        '401':
          description: Credenciales inv√°lidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - üîê Autenticaci√≥n
      summary: Registrar paciente
      description: Registra nuevo paciente en el sistema
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpRequest'
      responses:
        '200':
          description: Registro exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Error en los datos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /paciente/perfil:
    get:
      tags:
        - üë§ Pacientes
      summary: Ver perfil del paciente
      description: Obtiene la informaci√≥n del perfil del paciente autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: No autenticado
        '403':
          description: Sin permisos (solo pacientes)

  /paciente/expediente:
    get:
      tags:
        - üë§ Pacientes
      summary: Ver expediente m√©dico
      description: Obtiene el expediente m√©dico completo del paciente
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Expediente obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /medico/disponibles:
    get:
      tags:
        - ü©∫ M√©dicos
      summary: Listar m√©dicos disponibles
      description: Obtiene la lista de m√©dicos activos y disponibles
      responses:
        '200':
          description: M√©dicos disponibles obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /medico/perfil:
    get:
      tags:
        - ü©∫ M√©dicos
      summary: Ver perfil del m√©dico
      description: Obtiene la informaci√≥n del perfil del m√©dico autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Perfil obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo m√©dicos)

  /medico/{id}:
    get:
      tags:
        - ü©∫ M√©dicos
      summary: Obtener m√©dico por ID
      description: Obtiene la informaci√≥n de un m√©dico espec√≠fico
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: M√©dico obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '404':
          description: M√©dico no encontrado

  /citas/nueva:
    post:
      tags:
        - üìÖ Citas
      summary: Solicitar nueva cita
      description: |
        Crear una nueva cita m√©dica (solo pacientes).
        
        **Validaciones:**
        - M√°ximo 3 citas por paciente por d√≠a
        - No horarios duplicados para el mismo m√©dico
        - Solo en horarios de atenci√≥n del m√©dico
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CitaRequest'
      responses:
        '200':
          description: Cita creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Error de validaci√≥n (m√°ximo 3 citas, horario ocupado, etc.)
        '403':
          description: Sin permisos (solo pacientes)

  /citas/mis-citas:
    get:
      tags:
        - üìÖ Citas
      summary: Ver mis citas
      description: Obtiene las citas del paciente autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Citas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /citas/medico:
    get:
      tags:
        - üìÖ Citas
      summary: Ver citas del m√©dico
      description: Obtiene las citas del m√©dico autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Citas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo m√©dicos)

  /citas/{id}:
    put:
      tags:
        - üìÖ Citas
      summary: Modificar cita
      description: |
        Actualiza una cita existente.
        
        **Validaci√≥n:** Modificaci√≥n con al menos 2 horas de anticipaci√≥n.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CitaRequest'
      responses:
        '200':
          description: Cita actualizada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: No se puede modificar (menos de 2 horas de anticipaci√≥n)

  /citas/{id}/cancelar:
    put:
      tags:
        - üìÖ Citas
      summary: Cancelar cita
      description: |
        Cancela una cita existente.
        
        **Validaci√≥n:** Cancelaci√≥n con al menos 2 horas de anticipaci√≥n.
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Cita cancelada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /citas/{id}/completar:
    put:
      tags:
        - üìÖ Citas
      summary: Completar cita
      description: Marca una cita como completada (solo m√©dicos)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Cita completada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo m√©dicos)

  /recetas/nueva:
    post:
      tags:
        - üíä Recetas
      summary: Emitir nueva receta
      description: |
        Crear una nueva receta m√©dica (solo m√©dicos).
        
        **Validaciones:**
        - Medicamentos deben existir en el cat√°logo
        - No se pueden recetar medicamentos a los que el paciente es al√©rgico
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecetaRequest'
      responses:
        '200':
          description: Receta creada exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Error de validaci√≥n (alergia, medicamento no existe)
        '403':
          description: Sin permisos (solo m√©dicos)

  /recetas/mis-recetas:
    get:
      tags:
        - üíä Recetas
      summary: Ver mis recetas
      description: Obtiene las recetas del paciente autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Recetas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /recetas/medico:
    get:
      tags:
        - üíä Recetas
      summary: Ver recetas emitidas
      description: Obtiene las recetas emitidas por el m√©dico autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Recetas obtenidas exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo m√©dicos)

  /recetas/{id}:
    get:
      tags:
        - üíä Recetas
      summary: Ver receta espec√≠fica
      description: Obtiene los detalles de una receta espec√≠fica
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Receta obtenida exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /medicamentos:
    get:
      tags:
        - üß™ Medicamentos
      summary: Listar medicamentos
      description: Obtiene la lista de todos los medicamentos
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Medicamentos obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    post:
      tags:
        - üß™ Medicamentos
      summary: Crear medicamento
      description: Registra un nuevo medicamento (solo admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicamento'
      responses:
        '200':
          description: Medicamento creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo admin)

  /medicamentos/buscar:
    get:
      tags:
        - üß™ Medicamentos
      summary: Buscar medicamentos
      description: Busca medicamentos por nombre
      security:
        - BearerAuth: []
      parameters:
        - name: nombre
          in: query
          required: true
          schema:
            type: string
          example: "paracetamol"
      responses:
        '200':
          description: Medicamentos encontrados exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /medicamentos/{id}:
    get:
      tags:
        - üß™ Medicamentos
      summary: Obtener medicamento por ID
      description: Obtiene un medicamento espec√≠fico por su ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: Medicamento obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

    put:
      tags:
        - üß™ Medicamentos
      summary: Actualizar medicamento
      description: Actualiza un medicamento existente (solo admin)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medicamento'
      responses:
        '200':
          description: Medicamento actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo admin)

  /admin/pacientes:
    get:
      tags:
        - ‚öôÔ∏è Administraci√≥n
      summary: Listar todos los pacientes
      description: Obtiene la lista completa de pacientes (solo admin)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Pacientes obtenidos exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo admin)

    post:
      tags:
        - ‚öôÔ∏è Administraci√≥n
      summary: Registrar nuevo paciente
      description: Crea un nuevo paciente en el sistema (solo admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
                - email
                - password
                - numeroIdentificacion
                - fechaNacimiento
              properties:
                nombre:
                  type: string
                  example: "Mar√≠a Garc√≠a"
                email:
                  type: string
                  format: email
                  example: "maria.garcia@email.com"
                password:
                  type: string
                  example: "123456"
                numeroIdentificacion:
                  type: string
                  example: "87654321"
                fechaNacimiento:
                  type: string
                  format: date
                  example: "1985-10-20"
      responses:
        '200':
          description: Paciente creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo admin)

  /admin/medicos:
    post:
      tags:
        - ‚öôÔ∏è Administraci√≥n
      summary: Registrar nuevo m√©dico
      description: Crea un nuevo m√©dico en el sistema (solo admin)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - nombre
                - apellido
                - numeroLicencia
                - email
                - password
                - especialidad
                - tarifaConsulta
              properties:
                nombre:
                  type: string
                  example: "Dr. Carlos"
                apellido:
                  type: string
                  example: "Rodr√≠guez"
                numeroLicencia:
                  type: string
                  example: "MED123456"
                telefono:
                  type: string
                  example: "+1234567890"
                email:
                  type: string
                  format: email
                  example: "dr.carlos@hospital.com"
                password:
                  type: string
                  example: "123456"
                especialidad:
                  type: string
                  enum: [CARDIOLOGIA, DERMATOLOGIA, GASTROENTEROLOGIA, GINECOLOGIA, NEUROLOGIA, OFTALMOLOGIA, PEDIATRIA, PSIQUIATRIA, TRAUMATOLOGIA, UROLOGIA, MEDICINA_GENERAL]
                  example: "CARDIOLOGIA"
                tarifaConsulta:
                  type: number
                  format: decimal
                  example: 150.00
      responses:
        '200':
          description: M√©dico creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '403':
          description: Sin permisos (solo admin)

tags:
  - name: üîê Autenticaci√≥n
    description: Endpoints para autenticaci√≥n y registro
  - name: üë§ Pacientes  
    description: Endpoints para gesti√≥n de pacientes
  - name: ü©∫ M√©dicos
    description: Endpoints para gesti√≥n de m√©dicos
  - name: üìÖ Citas
    description: Endpoints para gesti√≥n de citas m√©dicas
  - name: üíä Recetas
    description: Endpoints para gesti√≥n de recetas m√©dicas
  - name: üß™ Medicamentos
    description: Endpoints para gesti√≥n de medicamentos
  - name: ‚öôÔ∏è Administraci√≥n
    description: Endpoints para administraci√≥n del sistema